generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id
  email         String       @unique
  name          String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  banExpires    DateTime?
  banReason     String?
  banned        Boolean?
  lastLoginAt   DateTime?
  role          String?
  accounts      Account[]
  invitations   Invitation[]
  members       Member[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id                   String   @id @default(cuid())
  expiresAt            DateTime
  token                String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  ipAddress            String?
  userAgent            String?
  userId               String
  activeOrganizationId String?
  impersonatedBy       String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model SupportTicket {
  id             String                 @id @default(cuid())
  customerName   String
  product        String
  issueType      String
  description    String
  whatsapp       String
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  assignedTo     Member[]               @relation("SupportTicketAssignedTo")
  organizationId String
  status         SupportTicketStatus    @default(New)
  priority       SupportTicketPriority  @default(Low)
  organization   Organization           @relation(fields: [organizationId], references: [id])
  history        SupportTicketHistory[]

  @@map("support_ticket")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id               String          @id
  name             String
  createdAt        DateTime
  logo             String?
  metadata         String?
  slug             String?         @unique
  theme            String?         @default("system")
  themePreferences Json?
  invitations      Invitation[]
  members          Member[]
  supportTickets   SupportTicket[]
  teams            Team[]

  @@map("organization")
}

model Team {
  id             String       @id @default(cuid())
  name           String
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?    @updatedAt
  members        Member[]     @relation("TeamMembers")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("team")
}

model Invitation {
  id             String       @id
  organizationId String
  email          String
  expiresAt      DateTime
  inviterId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?    @updatedAt
  status         String
  role           String
  teamId         String?
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Member {
  id              String          @id
  organizationId  String
  userId          String
  role            String
  createdAt       DateTime
  teamId          String?
  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  team            Team?           @relation("TeamMembers", fields: [teamId], references: [id])
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedTickets SupportTicket[] @relation("SupportTicketAssignedTo")

  @@index([teamId])
  @@map("member")
}

model SupportTicketHistory {
  id              String                 @id @default(cuid())
  supportTicketId String
  beforeStatus    SupportTicketStatus?
  afterStatus     SupportTicketStatus?
  beforePriority  SupportTicketPriority?
  afterPriority   SupportTicketPriority?
  changedBy       String?
  createdAt       DateTime               @default(now())
  supportTicket   SupportTicket          @relation(fields: [supportTicketId], references: [id], onDelete: Cascade)

  @@map("support_ticket_history")
}

enum SupportTicketStatus {
  New
  Acknowledged
  Investigation
  Awaiting_Customer_Response
  In_Progress
  Resolved
  Closed
}

enum SupportTicketPriority {
  Low
  Medium
  High
}
