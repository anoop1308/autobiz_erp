// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id
  name          String
  email         String       @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  banExpires    DateTime?
  banReason     String?
  banned        Boolean?
  lastLoginAt   DateTime?
  role          String?
  accounts      Account[]
  invitations   Invitation[]
  members       Member[]
  sessions      Session[]

  @@map("user")
}

model Session {
  userId               String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  activeOrganizationId String?
  impersonatedBy       String?
  ipAddress            String?
  userAgent            String?
  expiresAt            DateTime
  id                   String   @id @default(cuid())
  token                String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model SupportTicket {
  id             String       @id @default(cuid())
  customerName   String
  product        String
  issueType      String
  description    String
  whatsapp       String
  status         String       @default("open") // open, in-progress, resolved, closed
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("support_ticket")
}

model Account {
  userId                String
  scope                 String?
  createdAt             DateTime
  updatedAt             DateTime
  accessToken           String?
  accessTokenExpiresAt  DateTime?
  accountId             String
  idToken               String?
  refreshToken          String?
  id                    String    @id
  password              String?
  providerId            String
  refreshTokenExpiresAt DateTime?
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id               String          @id
  name             String
  createdAt        DateTime
  logo             String?
  metadata         String?
  slug             String?         @unique
  theme            String?         @default("system")
  themePreferences Json?
  invitations      Invitation[]
  members          Member[]
  teams            Team[]
  supportTickets   SupportTicket[]

  @@map("organization")
}

model Team {
  id             String       @id @default(cuid())
  name           String
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?    @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members        Member[]     @relation("TeamMembers")

  @@map("team")
}

model Invitation {
  id             String       @id
  organizationId String
  email          String
  expiresAt      DateTime
  inviterId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?    @updatedAt
  status         String // InvitationStatus @default(pending)
  role           String // Role?            @default(MEMBER)
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  teamId String?

  @@map("invitation")
}

model Member {
  id             String       @id
  organizationId String
  userId         String
  role           String
  createdAt      DateTime
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId         String?
  team           Team?        @relation("TeamMembers", fields: [teamId], references: [id], onDelete: SetNull)

  @@index([teamId])
  @@map("member")
}
